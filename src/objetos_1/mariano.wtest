import golosinas.*
import mariano.*

describe "tests de mariano" {

	fixture {
		chocolatin.pesoInicial(100)
		mariano.comprar(chocolatin)
		mariano.comprar(caramelo)
		mariano.comprar(bombon)
	}

	test "test comprar" {
		assert.equals(3, mariano.golosinas().size())
		assert.that(mariano.golosinas().contains(chocolatin))
		assert.that(mariano.golosinas().contains(caramelo))
		assert.that(mariano.golosinas().contains(bombon))
		assert.notThat(mariano.golosinas().contains(chupetin))
	}
	
	test "desechar compra"{
		
		mariano.desechar(bombon)
		assert.notThat(mariano.golosinas().contains(bombon))

	}
	
	// el methodo de assert es that , no That.
	test "hay golosinas sin tacc"{
		assert.that(mariano.hayGolosinaSinTACC())
	}
	
	test "son todas las golosinas precios cuidados"{
		assert.notThat(mariano.preciosCuidados())
	}
	
	// Segun el test, no tienes golosinas de sabor naranaja.
	test "golosinaSabor(unSabor)" {
		assert.equals(chupetin, mariano.golosinaSabor("naranja"))
	}
	
	// Ojo, el mensaje era golosinasSabor no golosinasDeSabor
	// Segun el test, tienes caramelo y bombon sabor frutilla.
	test "golosinasSabor(unSabor)" {
		assert.equals([caramelo, oblea], mariano.golosinasSabor("frutilla"))
	}
	
	
	
	test "golosina mas cara()" {
		assert.equals(chocolatin, mariano.golosinaMasCara())
	}
	
	test "peso de golosinas()" {
		assert.equals(120, mariano.pesoGolosinas())}
	
	// aca estas testeando una lista con un conjunto.
	// agregar el asList() para mantener en golosinasfaltantes.
	test "golosinas faltantes()" {
		assert.equals([alfajor, chupetin], mariano.golosinasFaltantes([alfajor, bombon, chocolatin, chupetin]))
	}
	
	// Falto crear el mensaje gustosFaltantes en mariano
//	test "gustos faltantes()" {
//		assert.equals(["melon", "vainilla"], mariano.gustosFaltantes(["melon", "chocolate", "frutilla", "vainilla"]))
//	}
	
	test "probar golosinas" {
		/* habilitar las lineas anuladas cuando se complete la definicion 
		 * de las golosinas
		 */
	    assert.equals(100, chocolatin.peso())
		assert.equals(5, caramelo.peso())
		assert.equals(15, bombon.peso())
		mariano.probarGolosinas()
		assert.equals(98, chocolatin.peso())
		assert.equals(4, caramelo.peso())
		assert.equals(11, bombon.peso())
	}
	
}

